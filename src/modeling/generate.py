from loguru import logger
import time
import typer
import pathlib

from src.config import params, device, FIGURES_DIR, MODELS_DIR
from src.utils.noise import noise
from src.modeling.models import Generator, Discriminator

import torch
from matplotlib import pyplot as plt

app = typer.Typer()


@app.command()
def main(
    discriminator_file: str = "discriminator.pkl",
    generator_file: str = "generator.pkl",
    figure_name: str = "generated_image.png",
    batch_size: int = 1,
):
    """
    Initially, the images generated by the generator will be pure noise.
    This is expected since the model has only been initialized with random weights.
    As the training process continues, the generator will learn to produce increasingly realistic images while the discriminator will improve its ability to distinguish between real and generated images.
    """
    # -----------------------------------------
    start_time = time.time()
    logger.info("Performing inference for model...")
    # -----------------------------------------

    discriminator_path = MODELS_DIR / discriminator_file
    generator_path = MODELS_DIR / generator_file

    generator = Generator(params.model.latent_dim).to(device)

    ## testando o gerador, ele deve produzir uma imagem ruidosa
    generator.eval()
    with torch.no_grad():
        gen = generator(noise(batch_size, params.model.latent_dim).to(device))
    plt.imshow(gen.cpu().squeeze().numpy(), cmap="gray")
    plt.savefig(FIGURES_DIR / figure_name)

    discriminator = Discriminator().to(device)
    # testando o discriminador ele deve retornar um tensor da seguinte forma tensor([[valor]])
    discriminator.eval()
    with torch.no_grad():
        dis = discriminator(gen)
    print(dis)

    # -----------------------------------------
    elapsed_time = time.time() - start_time
    logger.success(f"Inference complete. Elapsed time: {elapsed_time:.2f} seconds")
    # -----------------------------------------


if __name__ == "__main__":
    app()
